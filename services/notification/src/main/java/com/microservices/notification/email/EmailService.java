package com.microservices.notification.email;

import java.nio.charset.StandardCharsets;
import java.time.format.DateTimeFormatter;
import com.microservices.notification.exception.UserNotFoundException;
import com.microservices.notification.kafka.appointment.AppointmentNotification;
import com.microservices.notification.user.UserClient;
import com.microservices.notification.user.UserResponse;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;
import jakarta.mail.MessagingException;
import jakarta.mail.internet.MimeMessage;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Service
@RequiredArgsConstructor
@Slf4j
public class EmailService {

    private final JavaMailSender mailSender;
    // private final SpringTemplateEngine templateEngine;
    private final UserClient userClient;

    @Async
    public void sendSuccessfulAppointmentConfirmation(AppointmentNotification notification) {

        UserResponse patient = userClient.findById(notification.patientId()).getBody();
        if (patient == null) {
            throw new UserNotFoundException("Patient not found with ID: " + notification.patientId());
        }

        UserResponse doctor = userClient.findById(notification.doctorId()).getBody();
        if (doctor == null) {
            throw new UserNotFoundException("Doctor not found with ID: " + notification.doctorId());
        }

        try {
            MimeMessage mimeMessage = mailSender.createMimeMessage();
            MimeMessageHelper messageHelper = new MimeMessageHelper(mimeMessage, MimeMessageHelper.MULTIPART_MODE_NO, StandardCharsets.UTF_8.name());

            messageHelper.setFrom("anyen@gmail.com");
            messageHelper.setTo(patient.email());
            messageHelper.setSubject("X√°c nh·∫≠n ƒë·∫∑t l·ªãch kh√°m th√†nh c√¥ng");

            String formattedDate = notification.appointmentDate()
                    .format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
            String formattedTime = notification.appointmentTime()
                    .format(DateTimeFormatter.ofPattern("HH:mm"));

            String textContent = String.format("""
        Ch√†o b·∫°n,

        B·∫°n ƒë√£ ƒë·∫∑t l·ªãch kh√°m b·ªánh tr·∫ßm c·∫£m th√†nh c√¥ng v·ªõi th√¥ng tin sau:

        ü©∫ B√°c sƒ©: Dr. %s
        üìÖ Ng√†y kh√°m: %s
        üïí Gi·ªù kh√°m: %s
        üîñ M√£ l·ªãch h·∫πn: #%d
        üìå Tr·∫°ng th√°i: %s

        N·∫øu b·∫°n c√≥ b·∫•t k·ª≥ c√¢u h·ªèi n√†o, vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i qua email n√†y.

        Ch√∫c b·∫°n lu√¥n m·∫°nh kh·ªèe v√† an y√™n.

        Tr√¢n tr·ªçng,
        An Y√™n.
    """,
                    doctor.fullName(),
                    formattedDate,
                    formattedTime,
                    notification.id(),
                    notification.status());

            messageHelper.setText(textContent, false);
            mailSender.send(mimeMessage);
        } catch (MessagingException e) {
            log.error("Error creating MimeMessage: {}", e.getMessage());
            return;
        }
    }

}
